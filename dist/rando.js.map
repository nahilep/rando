{"version":3,"sources":["../rando.js"],"names":[],"mappings":"AAAA;;;;;;IAEM,M;;;;;;;;;AAEJ;;;+BAGkB;AAChB,aAAO,KAAK,KAAL,CAAW,KAAK,MAAL,EAAX,CAAP;AACD;;AAED;;;;;;;;;4BAMe,G,EAAK,G,EAAK;AACvB,aAAO,KAAK,KAAL,CAAW,KAAK,MAAL,MAAiB,MAAM,GAAvB,IAA8B,GAAzC,CAAP;AACD;;AAED;;;;;;;8BAIiB,G,EAAK;AACpB,aAAO,IAAI,KAAK,KAAL,CAAW,KAAK,MAAL,KAAgB,IAAI,MAA/B,CAAJ,CAAP;AACD;;AAED;;;;;;;;;;2BAQkC;AAAA,UAAtB,IAAsB,uEAAf,CAAe;AAAA,UAAZ,KAAY,uEAAJ,EAAI;;AAChC,aAAO,QAAQ,KAAK,KAAL,CAAW,QAAQ,KAAK,MAAL,EAAnB,IAAoC,CAA5C,CAAP;AACD;;;;;;AAIH,QAAQ,MAAR,GAAiB,MAAjB","file":"rando.js","sourcesContent":["'use strict';\n\nclass Random {\n\n  /**\n   * @return 0 or 1\n   */\n  static coinFlip() {\n    return Math.round(Math.random());\n  }\n\n  /**\n   * Integers only.\n   * @param minimum #\n   * @param maximum #\n   * @return random # in range\n   */\n  static inRange(min, max) {\n    return Math.round(Math.random() * (max - min) + min);\n  }\n\n  /**\n   * @param Array arr\n   * @return * from arr\n   */\n  static fromArray(arr) {\n    return arr[Math.floor(Math.random() * arr.length)];\n  }\n\n  /**\n   * Simulates rolling any number of any-sided dice.\n   * Default: 1d20\n   * @param   int Dice to be rolled\n   * @param   int Sides per die\n   * @return  int Result of roll\n   */\n\n  static roll(dice = 1, sides = 20) {\n    return dice * (Math.floor(sides * Math.random()) + 1);\n  }\n\n}\n\nexports.Random = Random;"]}